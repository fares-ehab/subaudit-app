/**
 * Service Worker for Offline Support
 * 
 * Provides offline functionality and caching for the Subscription Audit Tool
 * Implements cache-first strategy for static assets and network-first for API calls
 */

const CACHE_NAME = 'subaudit-v1';
const STATIC_CACHE = 'subaudit-static-v1';
const API_CACHE = 'subaudit-api-v1';

// Assets to cache immediately
const STATIC_ASSETS = [
  '/',
  '/index.html',
  '/manifest.json',
  '/offline.html',
  // Add your built assets here - these will be generated by Vite
  // '/assets/index-[hash].js',
  // '/assets/index-[hash].css'
];

// API endpoints to cache
const API_ENDPOINTS = [
  '/api/subscriptions',
  '/api/notifications',
  '/api/analytics'
];

/**
 * Install event - cache static assets
 */
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');
  
  event.waitUntil(
    Promise.all([
      // Cache static assets
      caches.open(STATIC_CACHE).then((cache) => {
        console.log('Caching static assets');
        return cache.addAll(STATIC_ASSETS);
      }),
      // Cache API responses
      caches.open(API_CACHE)
    ]).then(() => {
      console.log('Service Worker installed successfully');
      // Force activation of new service worker
      return self.skipWaiting();
    })
  );
});

/**
 * Activate event - clean up old caches
 */
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          // Delete old caches
          if (cacheName !== STATIC_CACHE && cacheName !== API_CACHE) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('Service Worker activated');
      // Take control of all pages immediately
      return self.clients.claim();
    })
  );
});

/**
 * Fetch event - implement caching strategies
 */
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }
  
  // Handle different types of requests
  if (isStaticAsset(url)) {
    // Cache-first strategy for static assets
    event.respondWith(cacheFirstStrategy(request, STATIC_CACHE));
  } else if (isAPIRequest(url)) {
    // Network-first strategy for API calls
    event.respondWith(networkFirstStrategy(request, API_CACHE));
  } else if (isNavigationRequest(request)) {
    // Network-first with offline fallback for navigation
    event.respondWith(navigationStrategy(request));
  }
});

/**
 * Cache-first strategy: Check cache first, fallback to network
 */
async function cacheFirstStrategy(request, cacheName) {
  try {
    const cache = await caches.open(cacheName);
    const cachedResponse = await cache.match(request);
    
    if (cachedResponse) {
      console.log('Serving from cache:', request.url);
      return cachedResponse;
    }
    
    console.log('Fetching from network:', request.url);
    const networkResponse = await fetch(request);
    
    // Cache successful responses
    if (networkResponse.ok) {
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.error('Cache-first strategy failed:', error);
    return new Response('Offline - Content not available', { 
      status: 503,
      statusText: 'Service Unavailable'
    });
  }
}

/**
 * Network-first strategy: Try network first, fallback to cache
 */
async function networkFirstStrategy(request, cacheName) {
  try {
    console.log('Fetching from network:', request.url);
    const networkResponse = await fetch(request);
    
    // Cache successful responses
    if (networkResponse.ok) {
      const cache = await caches.open(cacheName);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('Network failed, trying cache:', request.url);
    const cache = await caches.open(cacheName);
    const cachedResponse = await cache.match(request);
    
    if (cachedResponse) {
      console.log('Serving from cache:', request.url);
      return cachedResponse;
    }
    
    // Return offline response for API calls
    return new Response(JSON.stringify({
      error: 'Offline - Data not available',
      offline: true
    }), {
      status: 503,
      statusText: 'Service Unavailable',
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

/**
 * Navigation strategy: Network-first with offline page fallback
 */
async function navigationStrategy(request) {
  try {
    console.log('Navigation request:', request.url);
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      return networkResponse;
    }
    
    throw new Error('Network response not ok');
  } catch (error) {
    console.log('Navigation failed, serving offline page');
    const cache = await caches.open(STATIC_CACHE);
    const offlinePage = await cache.match('/offline.html');
    
    return offlinePage || new Response('Offline', { 
      status: 503,
      statusText: 'Service Unavailable'
    });
  }
}

/**
 * Check if request is for a static asset
 */
function isStaticAsset(url) {
  return url.pathname.startsWith('/assets/') ||
         url.pathname.endsWith('.js') ||
         url.pathname.endsWith('.css') ||
         url.pathname.endsWith('.png') ||
         url.pathname.endsWith('.jpg') ||
         url.pathname.endsWith('.svg') ||
         url.pathname.endsWith('.ico');
}

/**
 * Check if request is for API endpoint
 */
function isAPIRequest(url) {
  return url.pathname.startsWith('/api/') ||
         url.hostname.includes('supabase.co');
}

/**
 * Check if request is a navigation request
 */
function isNavigationRequest(request) {
  return request.mode === 'navigate' ||
         (request.method === 'GET' && 
          request.headers.get('accept') && 
          request.headers.get('accept').includes('text/html'));
}

/**
 * Background sync for offline actions
 */
self.addEventListener('sync', (event) => {
  console.log('Background sync triggered:', event.tag);
  
  if (event.tag === 'subscription-sync') {
    event.waitUntil(syncSubscriptions());
  } else if (event.tag === 'notification-sync') {
    event.waitUntil(syncNotifications());
  }
});

/**
 * Sync subscriptions when back online
 */
async function syncSubscriptions() {
  try {
    console.log('Syncing subscriptions...');
    
    // Get pending subscription changes from IndexedDB
    const pendingChanges = await getPendingChanges('subscriptions');
    
    for (const change of pendingChanges) {
      try {
        await fetch('/api/subscriptions', {
          method: change.method,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(change.data)
        });
        
        // Remove from pending changes
        await removePendingChange('subscriptions', change.id);
        console.log('Synced subscription change:', change.id);
      } catch (error) {
        console.error('Failed to sync subscription change:', error);
      }
    }
  } catch (error) {
    console.error('Subscription sync failed:', error);
  }
}

/**
 * Sync notifications when back online
 */
async function syncNotifications() {
  try {
    console.log('Syncing notifications...');
    
    const pendingChanges = await getPendingChanges('notifications');
    
    for (const change of pendingChanges) {
      try {
        await fetch('/api/notifications', {
          method: change.method,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(change.data)
        });
        
        await removePendingChange('notifications', change.id);
        console.log('Synced notification change:', change.id);
      } catch (error) {
        console.error('Failed to sync notification change:', error);
      }
    }
  } catch (error) {
    console.error('Notification sync failed:', error);
  }
}

/**
 * IndexedDB helpers for offline data management
 */
async function getPendingChanges(storeName) {
  // In a real implementation, you'd use IndexedDB to store pending changes
  // For now, return empty array
  return [];
}

async function removePendingChange(storeName, changeId) {
  // Remove the change from IndexedDB
  console.log(`Removing pending change ${changeId} from ${storeName}`);
}

/**
 * Push notification handler
 */
self.addEventListener('push', (event) => {
  console.log('Push notification received:', event);
  
  const options = {
    body: 'You have subscription renewals coming up!',
    icon: '/icon-192x192.png',
    badge: '/badge-72x72.png',
    tag: 'subscription-reminder',
    data: {
      url: '/notifications'
    },
    actions: [
      {
        action: 'view',
        title: 'View Renewals'
      },
      {
        action: 'dismiss',
        title: 'Dismiss'
      }
    ]
  };
  
  if (event.data) {
    const data = event.data.json();
    options.body = data.message || options.body;
    options.data = { ...options.data, ...data };
  }
  
  event.waitUntil(
    self.registration.showNotification('SubAudit', options)
  );
});

/**
 * Notification click handler
 */
self.addEventListener('notificationclick', (event) => {
  console.log('Notification clicked:', event);
  
  event.notification.close();
  
  if (event.action === 'view') {
    event.waitUntil(
      clients.openWindow(event.notification.data.url || '/')
    );
  }
});